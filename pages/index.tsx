import type { GetServerSideProps } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useMemo, useEffect, useState, SyntheticEvent } from 'react'
import axios from 'axios'
import useSWR from 'swr'
import { User, Ticket, Item } from '../types'

interface Result {
    user: User
    ticket: Ticket
    item: Item
}

const Home = ({ items: itemlist }: any) => {
    // states
    const [userId, setUserId] = useState('')
    const [ticketId, setTicketId] = useState('')

    const { data: ticketlist, isValidating: ticketsloading } = useSWR(
        `http://localhost:3000/api/ticket/user/${userId}`
    )
    const { data: userlist, isValidating: usersloading } = useSWR<User[]>(
        `http://localhost:3000/api/ticket/user`
    )

    const [tickets, setTickets] = useState<Ticket[]>()
    const [items, setItems] = useState<Item[]>(itemlist)
    const [users, setUsers] = useState<User[]>()

    const [results, setResults] = useState<Result>({
        user: {
            id: '',
            nearId: '',
            discord: {
                username: '',
                tag: '',
            },
        },
        ticket: {
            id: '',
            ticketName: '',
            ticketNumber: 0,
            isMinted: true,
            userId: '',
        },
        item: {
            id: '',
            shySkullId: 0,
            rarity: '',
            isAvailable: false,
        },
    })

    useEffect(() => {
        !usersloading && userlist && setUsers(userlist)
    }, [userlist, usersloading])

    useEffect(() => {
        !ticketsloading && ticketlist && setTickets(ticketlist)
    }, [ticketlist, ticketsloading])

    const randomize = async (e: SyntheticEvent) => {
        e.preventDefault()
        if (items.length === 0) return

        const len = items.length - 1
        const idx = len === 1 ? 0 : Math.ceil(Math.random() * len + 0)

        const itemId = items[idx].id

        const { data } = await axios.get(
            `http://localhost:3000/api/randomizer/${itemId}/${userId}/${ticketId}`
        )

        updateData(itemId, ticketId)
        setResults(data)
    }

    const updateData = (itemId: string, ticketId: string) => {
        // available items
        const uItems = items.filter((item) => item.id !== itemId)
        setItems(uItems)
        // available tickets
        const uTickets = tickets?.filter((ticket) => ticket.id !== ticketId)
        setTickets(uTickets)
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta
                    name='description'
                    content='Generated by create next app'
                />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <form className={styles.main} onSubmit={randomize}>
                <h1 className={styles.title}>Randomizer!</h1>
                <div className={styles.grid}>
                    <ItemList items={items} />

                    <a className={styles.card}>
                        <h2>Select User</h2>
                        <select
                            value={userId}
                            onChange={(e) => setUserId(e.target.value)}
                            required={true}
                        >
                            <option></option>
                            {!usersloading && <UserList users={users} />}
                        </select>
                    </a>

                    <a className={styles.card}>
                        <h2>Select Ticket</h2>
                        <select
                            value={ticketId}
                            onChange={(e) => setTicketId(e.target.value)}
                            required={true}
                        >
                            <option></option>
                            {!ticketsloading && (
                                <TicketList tickets={tickets} />
                            )}
                        </select>
                    </a>

                    <button type='submit' disabled={items.length === 0}>
                        Randomize!
                    </button>
                    {results && <Results results={results} />}
                </div>
            </form>
        </div>
    )
}

export const getServerSideProps: GetServerSideProps = async () => {
    const { data } = await axios(`http://localhost:3000/api/item/available`)
    return { props: { items: data } }
}

const ItemList = ({ items }: any) => {
    return (
        <a className={styles.card}>
            <h2>Available items</h2>
            {items && items.map((item: Item) => <p>{item.shySkullId}</p>)}
        </a>
    )
}

const UserList = ({ users }: any) => {
    return (
        <>
            {users &&
                users.map((user: User) => (
                    <option value={user.id}>{user.nearId}</option>
                ))}
        </>
    )
}

const TicketList = ({ tickets }: any) => {
    return (
        <>
            {tickets &&
                tickets.map((ticket: Ticket) => (
                    <option value={ticket.id} disabled={ticket.isMinted}>
                        {ticket.ticketNumber}
                    </option>
                ))}
        </>
    )
}

const Results = ({ results }: any) => {
    return (
        <a className={styles.card}>
            <h2>Results</h2>
            <p>{results.user.nearId}</p>
            <p>{results.ticket.ticketName}</p>
            <p>
                {results.item.shySkullId} {results.item.rarity}
            </p>
        </a>
    )
}

export default Home
